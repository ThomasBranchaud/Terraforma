Spells are broken up into a few different pieces that allow for them to be cast without knowing the script file that is doing the casting. This allows them to have individual script files for unique effects, but the ability to be cast from other scripts without needing a direct reference.

The parts of a spell are as follows:
1. A spell class asset
2. A spell prefab
3. The spell's script

To create a spell, first a folder should be created to hold the assets. This folder should be made inside the folder of the respective character that the spell is for ie. a Lancin spell in the Lancin Spell List folder.

Inside the created folder, the first thing that should be created in a Basic_Spell_Class asset. To create one, right click, then hover over the create option. At the top of the list of options find the Basic_Spell_Class.

A Basic_Spell_Class has a few variables that should then be adjusted:
	Mana Cost - Integer, Amount of mana needed to cast the spell
	Spell Name - String, name of the spell
	Element Type - String, type of elemental damage the spell will deal
	Spell Prefab - Skip for now
	Description - String, a description of the spell's effects
	Targeted - Boolean, if the spell has to be targeted
	Range - Integer, amount of tiles the spell can reach
	Target Tiles - Boolean, if the spell can target tiles
	Target Allies - Boolean, if the spell can target allies
	Target - Doesn't need to be touched
	Amount of Targets - Integer, how many targets the spell can hit
	Require Different Targets - Boolean, if the spell needs to be directed at different targets
	Target Enemies - Boolean, if the spell is able to hit enemies
	Hit Own Tile - Boolean, if the spell is able to hit the caster's tile
	Hit Self - Boolean, if the spell is able to hit the caster

After these variables have been filled out, we can turn our attention to the Spell Prefab variable. To fill this, right click and open the create menu again, this time selecting the Prefab option and then giving it the same name as the earlier created asset. 

Click on the asset, then drag the prefab to the Spell Prefab variable. This should set the variable to reference the newly created Prefab.

With this done, the next step is to select the prefab and attach a new C# script. The script should be named with the convention "(name_of_spell)_Spell" with (name_of_spell) being filled in with the name of the spell being created. If the script has been correctly attached and the asset's Spell Prefab variable is set to the created prefab, then it's time to open the script file.

By default, the script should be inheriting from the MonoBehavior class, but we want it to inherit from another as well. Place a comma after MonoBehaviour and add Cast_Spell. Cast_Spell is an interface with a single function, castSpell(), that is called whenever the spell is cast. Inside the class this function should be created:

public void castSpell(List<GameObject> targets, GameObject caster){}

All functionality for the spell will be included inside this function.

With all of this set up, the final step is to add the spell to the character's spell list. Return to unity and navigate to the CharacterClasses folder. Find the correct unit and select it. In the inspector locate the Spell List script and it's associated list. Add a new entry and drag your created Spell Asset into the new spot.

This should add the spell to the list, allowing the character in game to cast it